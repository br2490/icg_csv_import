<?php

// I am a terrible global variable user. - BR
$_icg_csv_import_glob = array();


/**
 * Include batch.inc when module loads.  Required for batch processing!
 */
function icg_csv_import_init() {
  module_load_include('inc', 'icg_csv_import', 'includes/batch');

  // Turn on error reporting.
  error_reporting(E_ALL);
  ini_set('display_errors', TRUE);
  ini_set('display_startup_errors', TRUE);

  // Explicitly set auto detection of line endings by PHP!
  ini_set('auto_detect_line_endings', TRUE);
}


/**
 * Impl. hook_xml_form_builder_get_form_modify_definition
 *
 * Cause we gonna modify some definitions, if you know what I mean.
 *
 * @param $form
 * @param $form_state
 *
 */
function icg_csv_import_xml_form_builder_get_form_modify_definition_alter(&$form, &$form_state) {
  //Foremost: ASSERT THAT WE'RE ACTUALLY CATCHING THIS HOOK FROM OUR MODULE!!!
  // if NOT $form_state contains something unique that we're injecting RETURN.
  // do not use mappable_options in the all_values array!
  global $_icg_csv_import_glob;
  dpm('hit');
  dpm($form);
  if (empty($form_state['all_values']) & empty($_icg_csv_import_glob)) {
    return;
  }

  // If this is our first run we must set the mappable options to our global.
  if (empty($_icg_csv_import_glob['mappable_options'])) {
    $_icg_csv_import_glob['mappable_options'] = $form_state['all_values']['mappable_options'];
    $_icg_csv_import_glob['manipulable_fields'] = array(
      'textfield',
      'textarea',
      'tags',
    );
  }

  //ASSERT mappable option exists.
  // if NOT throw exception, @TODO follow this path to add additional error chking
  // do not use [mappable_options] in the initial assertion, since we could be in our module, but something is awry

  // So we know how our $form looks right now. It's pretty AMAZING.
  _icg_form_array_iterator_set_options_redux($form);

  dpm($form);
}


// THIS SHOULD NOT BE IN THIS FILE
function _icg_form_array_iterator_set_options_redux(&$array) {
  global $_icg_csv_import_glob;

  //ASSERT OUR GLOBALS EXIST.


  if (isset($array['#type'])
    && in_array($array['#type'], $_icg_csv_import_glob['manipulable_fields'])
  ) {
    $array['#type'] = 'select';
    $array['#options'] = $_icg_csv_import_glob['mappable_options'];
    // Do we want to append something to the description as help text?
  }
  else {
    if (is_array($array)) {
      foreach ($array as $key => &$value) {
        if (isset($value) && is_array($value)) {
          _icg_form_array_iterator_set_options_redux($value);
        }
      }
    }
  }
}


/**
 * ICG CSV Import Menu
 *
 * @return array
 */
function icg_csv_import_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/csv-import'] = array(
    'title' => t('CSV Import'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('icg_csv_import_form', 2),
    'access arguments' => array(2),
    'access callback' => 'icg_csv_access_callback',
    'file' => 'includes/map_ingest_form.inc',
    'type' => MENU_LOCAL_TASK,
  );
  return $items;
}

/**
 * ICG CSV Menu Item Access Callback
 */
function icg_csv_access_callback($object) {
  if (user_access('ingest fedora objects')) {
    $relation = '';
    $collection_models = islandora_basic_collection_get_collection_content_models();
    $collection_predicates = array(
      'isMemberOfCollection',
      'isMemberOf',
    );
    $is_a_collection = count(array_intersect($collection_models, $object->models)) > 0;
    return $is_a_collection;
  }
  return FALSE;
}

/**
 * Implements hook_fetch_CSV_defaults.
 *
 * function icg_csv_import_fetch_CSV_defaults( ) {
 * $path = drupal_get_path('module', 'icg_csv_import');
 * $array = array(
 * 'label_field' => '/mods/titleInfo/title',
 * 'transform'   => $path . '/tests/data/mods_to_dc.xsl',
 * );
 * return $array;
 * }
 */

/**
 * Implements hook_fetch_OBJ.
 *
 * function icg_csv_import_fetch_OBJ($path, $credentials) {
 *
 * $ftp_username = $credentials['username'];
 * $ftp_userpass = $credentials['password'];
 *
 * $module_name = basename(__FILE__, '.module');
 *
 * // Explode the $path... should be of the form server:/dir1/dir2/dir3/filename.ext
 * list($server, $rest) = explode(':', $path, 2);
 * $parts = pathinfo($rest);
 * $ftp_directory = $parts['dirname'];
 * $filename = $parts['basename'];
 *
 * // Set up a basic connection.
 * $conn_id = ftp_ssl_connect($server, 21, 180);
 * if (!$conn_id) {
 * watchdog($module_name, "FTP connection to server '%server' failed!", array('%server' => $server), WATCHDOG_ERROR);
 * return FALSE;
 * }
 *
 * // Login with the specified FTP username and password.
 * $login_result = ftp_login($conn_id, $ftp_username, $ftp_userpass);
 * if (!$login_result) {
 * watchdog($module_name, "FTP login failed!", array( ), WATCHDOG_ERROR);
 * return FALSE;
 * }
 *
 * // Set FTP to passive mode.
 * ftp_pasv($conn_id, TRUE);
 *
 * // Attempt to change the remote directory as specified.
 * $change_dir = ftp_chdir($conn_id, $ftp_directory);
 * if (!$change_dir) {
 * watchdog($module_name, "FTP chdir to '%directory' failed!", array('%directory' => $ftp_directory), WATCHDOG_ERROR);
 * die("ftp_chdir failed!");
 * return FALSE;
 * } else {
 * $txt = "Current directory is: " . ftp_pwd($conn_id);
 * watchdog($module_name, $txt, array( ), WATCHDOG_INFO);
 * }
 *
 * // Fetch a file via FTP.
 * $temp_file = drupal_tempnam('temporary://', 'import_content_');   // open a temp file
 * if (!ftp_get($conn_id, $temp_file, $filename, FTP_BINARY)) {
 * watchdog($module_name, "Could not download file '%filename' via FTP.", array('%filename' => $filename), WATCHDOG_ERROR);
 * return FALSE;
 * }
 *
 * return $temp_file;
 * }
 */
