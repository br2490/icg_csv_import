<?php

/**
 * icg_csv_import_batch_item
 * Generates one new object in the Islandora repository based on the Xpaths ($headers)
 * of the destination data fields and corresponding $row data.
 *
 * @param array() $headers - Xpaths of destination fields
 * @param array() $row - One CSV row of corresponding data to deliver to destination fields
 * @param ??? $xml_form_id - @TODO...TBD. Presumably the form ID that the datastream's XML schema can be derived from
 * @param IslandoraFedoraObject $parent_object  - The collection object that the new object will belong to
 * @param string $namespace - The namespace, no trailing colon, that the new object will be defined in
 * @param bool $inactive - Indicates if the new object is to be active (default) of inactive
 * @return string|bool - The PID of the ingested object, or FALSE in case of an error
 */
function icg_csv_import_batch_item($headers, $row, $xml_form_id, $parent_object, $namespace, $inactive=FALSE) {
  static $XPToXML = '/includes/XPathsToXML.xsl';
  static $MODS = '/templates/MODS.xml';
  
  $path = drupal_get_path('module','icg_csv_import');
 
  // Fetch the XPathsToXML.xsl XSL template
  if (!$xp = file_get_contents($path.$XPToXML)) {
    drupal_set_message("Could not open '$XPToXML'.", 'error');
    return FALSE;
  } 

  // Load the XSL template as XML
  $xsl = new DOMDocument( );
  if (!$xsl->loadXML($xp)) {
    drupal_set_message("Could not load '$xp' as a DOMDocument.", 'error');
    return FALSE;
  }

  /* OK, now $xsl is a DOMDocument 
  // Save this DOMDocument as a temp file for debugging
  $temp = drupal_tempnam('temporary://', 'XSL_');
  $text = $xsl->saveXML();
  if (!file_put_contents($temp, $text)) {
    drupal_set_message("Could not save XSL as a temporary text file.", 'error');
    return FALSE;
  } else {
    drupal_set_message("Complete XSL transform saved as '$temp'.", 'status');
  } */

  // Find <variable>, the parent of all <item> nodes
  $dx = new DOMXPath($xsl);
  $nodes = $dx->query("/xsl:stylesheet/xsl:variable[@name='vPop']");
  if ($nodes->length < 1) {
    drupal_set_message("No <variable> element found in the XSL template.", 'errror');
    return FALSE;
  }
  
  $variable = $nodes->item(0);                      // the first (and only!) 'variable' element

  // Loop $i through $headers and $row.  Append each $header (xpath) and $row (data) as
  // an 'item' onto $top.  An example 'item': <item path="/mods/name[1]/role/roleTerm[@type='text']">creator</item>
  $length = min(count($headers), count($row));
  for ($i=0; $i<$length; $i++) {
    $item = $xsl->createElement('item',$row[$i]);   // DOMElement
    $path = $xsl->createAttribute('path');          // DOMAttribute
    $path->value = $headers[$i];                    // the path (attribute value)
    $item->appendChild($path);                      // apply the path attribute to the item
    $variable->appendChild($item);                  // append the new item to the parent $variable element
  }

  // OK, now $xsl is a DOMDocument containing our complete transform
  // Save this DOMDocument as a temp file for debugging
  $temp = drupal_tempnam('temporary://', 'XPathsToXML_');
  $text = $xsl->saveXML();
  if (!file_put_contents($temp, $text)) {
    drupal_set_message("Could not save XSL as a temporary text file.", 'error');
    return FALSE;
  } else {
    drupal_set_message("Complete XSL transform saved as '$temp'.", 'status');
  }

  // Prep to transform using the new XSL
  $xslt = new XSLTProcessor( );
  $xslt->importStyleSheet($xsl);

  // Fetch the MODS template
  if (!$template = file_get_contents($path.$MODS)) {
    drupal_set_message("Could not open '$MODS'.", 'error');
    return FALSE;
  }

  // Load the template as XML
  $xml = new DOMDocument( );
  if (!$xml->load($template)) {
    drupal_set_message("Could not load '$MODS' as XSL.", 'error'); 
    return FALSE;
  }
  
  // Apply $xslt to the MODS content
  $document = DOMDocument::loadXml($template);
  if ($doc = $xslt->transformToDoc($document)) {
    $xmlString = $doc->saveXML();
    $new_xml = new DOMDocument( );
    $new_xml->setContentFromString($xmlString);
  }

  return $xmlString;
}

